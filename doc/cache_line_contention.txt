The cacheline holds 16 entries plus a target triangle ID, for each entry:

start of block
length of block
current triangle ID
waiting flag
free flag

Starts with a single block, 0+4096 on triangle 0, waiting, not free:

B 0	   0	4096	0000	W-
B 1-15				-F

The idea then is that one of the SPU processes first grabs the first waiting
block, splitting it first if there aren't enough waiting tasks (<3
including this one)

B 0	   0	2048	0000	--
B 1	2048	2048	0000	W-
B 2-15				 -F

So now the block the SPU wants to process is 0+2048

As this is more bigger than the maximum number to process at once, we
split it (this bit to be changed...)

B 0	   0	  16	0000	--
B 1	2048	2048	0000	W-
B 2	  16	2032	0000	W-
B 3-15				-F

When we've processed this, we end up with:

B 0	   0	  16	0001	W-
B 1	2048	2048	0000	W-
B 2	  16	2032	0000	W-
B 3-15				-F

We then try to merge the blocks with the same triangle number:

B 0	   0	  16	0001	W-
B 1				F-
B 2	  16	4080	0000	W-
B 3-15				-F

We then repeat the loop, however because block 0 already has the
current highest triangle number, we ignore it for now...

First of all, split the block again and claim the first half:

B 0	   0	  16	0001	W-
B 1	2048	2048	0000	W-
B 2	  16	2032	0000	--
B 3-15				-F

As this is more bigger than the maximum number to process at once, we
split it (this bit to be changed...)

B 0	   0	  16	0001	W-
B 1	2048	2048	0000	W-
B 2	  16	  16	0000	--
B 3	  32	2016	0000	W-
B 4-15				-F

In the course of processing this, an extra triangle becomes available
so we continue processing this block to completion:

B 0	   0	  16	0001	W-
B 1	2048	2048	0000	W-
B 2	  16	  16	0002	W-
B 3	  32	2016	0000	W-
B 4-15				-F

Merging blocks again produces:

B 0	   0	  16	0001	W-
B 1				F-
B 2	  16	  16	0002	W-
B 3	  32	4064	0000	W-
B 4-15				-F

Now, we take the first waiting block which isn't at the end triangle,
so in this case block 0:

B 0	   0	  16	0001	--
B 1				F-
B 2	  16	  16	0002	W-
B 3	  32	4064	0000	W-
B 4-15				-F

As the block is the same size as our maximum to process at once, we just
process it without splitting. After processing, we end up with:

B 0	   0	  16	0002	W-
B 1				F-
B 2	  16	  16	0002	W-
B 3	  32	4064	0000	W-
B 4-15				-F

The merging process this time takes the two smaller blocks:

B 0	   0	  32	0002	W-
B 1				F-
B 2				F-
B 3	  32	4064	0000	W-
B 4-15				-F

We then grab, split and beging to process block 3:

B 0	   0	  32	0002	W-
B 1	2048	2048	0000	W-
B 2	  48	2000	0000	W-
B 3	  32	  16	0000	--
B 4-15				-F

In the course of this processing, the end triangle goes up to 3:

B 0	   0	  32	0002	W-
B 1	2048	2048	0000	W-
B 2	  48	2000	0000	W-
B 3	  32	  16	0003	W-
B 4-15				-F

etc...

---------------------------------------------------------------------

If we have 2 free blocks, a block n..(n+l-1) @ t, target triangle T, we
can split up so we have:

n..(n+x-1) @ t+1
(n+x)..(n+y-1) @ T
(n+y)..(n+l-1) @ t

If we have 1 free block, a block n..(n+l-1) @ t, target triangle T, we
can split up so we have:

n..(n+x-1) @ T
(n+x)..(n+l-1) @ t

or

n..(n+x-1) @ t
(n+x)..(n+l-1) @ T

If we have no free blocks, a block n..(n+x-1) @ t1 and
a block (n+x)..(n+l-1) @ t2, we can join the edge:

n..(n+y-1) @ t1
(n+y)..(n+l-1) @ t2

where y>x if t1>t2, i.e. process start of block 2 to block 1's level
where y<x if t1<t2, i.e. process end of block 1 to block 2's level



----------------------------------------------------------------------

size<=NUM_PER_CHUNK
	process to end triangle as simple case

free>0
	mark as busy, reserve the other block
	chunkTriangle is triangle to test for
	scan for first subblock that needs drawing
	if found:
		s  = start of original block
		s' = start of subblock to process
		e = s' + NUM_TILES_PER_BLOCK (limit by end of orig block)
		mark reserved block as waiting e->end of orig block,
			keeping chunkTriangle untouched
		render block s' -> e-1 for this triangle
		re-check number of free blocks, if one free:
			mark s -> s'-1 as waiting, up to next
			reserve another block
			render s' -> e-1 for all tris up to endTriangle
			mark s -> e-1 as waiting, up to endTriangle
		else:
			mark s -> e-1 as waiting, up to next
	else no subblock:
		update chunkTriangle to next triangle
		if chunkTriangle != endTriangle:
			repeat with same block
		else:
			set the whole block to endTriangle
			unreserve other block

free == 0, find two adjacent blocks both waiting
	if chunkTriangles are equal, join blocks together freeing a block
	otherwise, we're aiming to shift the boundary...
	mark both as busy
	select the one with the "lowest" chunkTriangle
	if the other block ("highest" chunkTriangle) is before it:
		scan for the first subblock that needs drawing
		if there is none:
			update that block's chunkTriangle
			if still different:
				repeat
			else:
				join blocks together, free other
		else:
			s  = start of original block
			s' = start of subblock to process
			e = s' + NUM_TILES_PER_BLOCK (limit by end of orig blk)
			if next tri == other's chunkTriangle:
				shift the boundary, releasing the other
				render s' -> e-1




#		if spare block and next != endTriangle
#			mark s -> s'-1 as waiting up to next
#			reserve it, creating s' -> e-1
#			process as in size<=NUM
#		else:
#			process
